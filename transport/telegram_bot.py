import os
import logging
import asyncio
from telegram.ext import ApplicationBuilder
from telegram.error import TelegramError
from django.conf import settings

logger = logging.getLogger(__name__)

class TelegramNotifier:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.app = None
        
        if self.bot_token and self.chat_id:
            try:
                self.app = ApplicationBuilder().token(self.bot_token).build()
            except Exception as e:
                logger.error(f"Failed to initialize Telegram bot: {e}")
    
    async def _send_message(self, text, parse_mode=None):
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        if not self.app or not self.chat_id:
            logger.warning("Telegram bot not configured properly")
            return False
            
        try:
            await self.app.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode=parse_mode
            )
            return True
        except Exception as e:
            logger.error(f"Failed to send message: {e}")
            return False
    
    def test_connection(self):
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
        """
        try:
            async def test():
                return await self._send_message(
                    "üîî –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
                )
            return asyncio.run(test())
        except Exception as e:
            logger.error(f"Test connection failed: {e}")
            return False
    
    def send_ticket_notification(self, ticket):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ –≤ Telegram
        """
        try:
            message = (
                f"üîî –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç!\n\n"
                f"üìß Email: {ticket.email}\n"
                f"üìù –¢–µ–º–∞: {ticket.subject}\n"
                f"üÜî ID: {ticket.id}\n"
                f"‚è∞ –°–æ–∑–¥–∞–Ω: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            )
            
            if ticket.transport:
                message += f"üöö –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {ticket.transport.number}\n"
            
            async def send():
                return await self._send_message(message, parse_mode='HTML')
            return asyncio.run(send())
            
        except Exception as e:
            logger.error(f"Failed to send ticket notification: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
telegram_notifier = TelegramNotifier() 